// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TorreAcademy.Core.Data;

namespace TorreAcademy.Core.Migrations
{
    [DbContext(typeof(TorreAcademyDbContext))]
    partial class TorreAcademyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TorreAcademy.Core.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Highlighted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("ToMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("TorreAcademy.Core.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("085b5c6f-5fa5-45f0-a76b-9ede0904311c"),
                            Name = "Torre",
                            PublicId = "Torre"
                        });
                });

            modelBuilder.Entity("TorreAcademy.Core.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86a7856d-e263-45c5-beec-e511df45ae61"),
                            Description = "Software Development",
                            Name = "Software Development"
                        });
                });

            modelBuilder.Entity("TorreAcademy.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1f5e4dd-c883-4ad8-9c76-b15f254a0e45"),
                            CreatedDate = new DateTime(2022, 1, 25, 4, 55, 46, 403, DateTimeKind.Local).AddTicks(6502),
                            Email = "khabir.aiub@gmail.com",
                            FirstName = "Muhammad Khabir",
                            LastName = "Uddin",
                            Phone = "+8801914328355",
                            UserName = "khabir"
                        },
                        new
                        {
                            Id = new Guid("80d0da1c-a1fa-4a0b-9ffc-624566addc56")
                        });
                });

            modelBuilder.Entity("TorreAcademy.Core.Entities.UserOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganizations");
                });

            modelBuilder.Entity("TorreAcademy.Core.Entities.UserSkill", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Proficiency")
                        .HasColumnType("int");

                    b.Property<Guid?>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId")
                        .IsUnique()
                        .HasFilter("[SkillId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a28a70b7-c0ed-43e6-86bc-be78215617ef"),
                            Proficiency = 1,
                            SkillId = new Guid("86a7856d-e263-45c5-beec-e511df45ae61"),
                            UserId = new Guid("e1f5e4dd-c883-4ad8-9c76-b15f254a0e45")
                        });
                });

            modelBuilder.Entity("TorreAcademy.Core.Entities.Experience", b =>
                {
                    b.HasOne("TorreAcademy.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TorreAcademy.Core.Entities.UserOrganization", b =>
                {
                    b.HasOne("TorreAcademy.Core.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorreAcademy.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TorreAcademy.Core.Entities.UserSkill", b =>
                {
                    b.HasOne("TorreAcademy.Core.Entities.Skill", null)
                        .WithOne("UserSkill")
                        .HasForeignKey("TorreAcademy.Core.Entities.UserSkill", "SkillId");

                    b.HasOne("TorreAcademy.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
